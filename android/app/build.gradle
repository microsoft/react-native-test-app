buildscript {
    def androidDir = "${buildscript.sourceFile.getParent()}/../"
    apply(from: "${androidDir}/test-app-util.gradle")
    apply(from: "${androidDir}/dependencies.gradle")
}

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android") version "${kotlinVersion}"
    id("org.jetbrains.kotlin.kapt") version "${kotlinVersion}"
}

def reactNativePath = file(findNodeModulesPath("react-native", rootDir))
def codegenPath = file(findNodeModulesPath("react-native-codegen", reactNativePath))

if (isNewArchitectureEnabled(project)) {
    apply(plugin: "com.facebook.react")

    react {
        codegenDir = codegenPath
        reactNativeDir = reactNativePath
    }
}

// `react-native run-android` is hard-coded to look for the output APK at a very
// specific location. See
// https://github.com/react-native-community/cli/blob/6cf12b00c02aca6d4bc843446394331d71a9749e/packages/platform-android/src/commands/runAndroid/index.ts#L180
buildDir = "${rootDir}/${name}/build"

def reactNativeVersion = getPackageVersionNumber("react-native", rootDir)

repositories {
    maven {
        url = uri("${reactNativePath}/android")
    }

    mavenCentral()
    google()

    // TODO: Remove this block when we drop support for 0.64.
    if (reactNativeVersion < 6500) {
        // Artifacts for 0.65+ are published to Maven Central. If we're on an
        // older version, we still need to use JCenter.
        // noinspection JcenterRepositoryObsolete
        jcenter() {
            content {
                includeGroup("com.facebook.fbjni")
                includeGroup("com.facebook.flipper")
                includeGroup("com.facebook.fresco")
                includeGroup("com.facebook.yoga")
            }
        }
    }

    // https://github.com/AzureAD/microsoft-authentication-library-for-android#step-1-declare-dependency-on-msal
    maven {
        url = uri("https://pkgs.dev.azure.com/MicrosoftDeviceSDK/DuoSDK-Public/_packaging/Duo-SDK-Feed/maven/v1")
    }
}

apply(from: "${projectDir}/../../test-app.gradle")
applyTestAppModule(project)

project.ext.react = [
    abiSplit             : false,
    appName              : getAppName(),
    applicationId        : getApplicationId(),
    architectures        : ["arm64-v8a", "armeabi-v7a", "x86", "x86_64"],
    enableFabric         : isFabricEnabled(project),
    enableFlipper        : getFlipperVersion(rootDir),
    enableHermes         : true,
    enableNewArchitecture: isNewArchitectureEnabled(project),
]

project.ext.signingConfigs = getSigningConfigs()

android {
    compileSdkVersion project.ext.compileSdkVersion

    if (project.hasProperty("ndkVersion")) {
        ndkVersion project.ext.ndkVersion
    }

    // TODO: Remove this block when minSdkVersion >= 24. See
    // https://stackoverflow.com/q/53402639 for details.
    if (reactNativeVersion < 6900) {
        compileOptions {
            sourceCompatibility(JavaVersion.VERSION_1_8)
            targetCompatibility(JavaVersion.VERSION_1_8)
        }
    }

    kotlinOptions {
        allWarningsAsErrors = true
        if (reactNativeVersion < 6900) {
            jvmTarget = JavaVersion.VERSION_1_8
        } else {
            jvmTarget = JavaVersion.VERSION_11
        }
    }

    defaultConfig {
        applicationId project.ext.react.applicationId
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode getVersionCode()
        versionName getVersionName()

        def (appManifest, checksum) = validateManifest(rootDir)
        buildConfigField "String", "ReactTestApp_appManifest", "\"${appManifest}\""
        buildConfigField "String", "ReactTestApp_appManifestChecksum", "\"${checksum}\""

        def recommendedFlipperVersion = getFlipperRecommendedVersion(rootDir)
        buildConfigField "String",
                         "ReactTestApp_recommendedFlipperVersion",
                         recommendedFlipperVersion ? "\"${recommendedFlipperVersion}\"" : "\"0\""

        def singleApp = getSingleAppMode()
        buildConfigField "String", "ReactTestApp_singleApp", singleApp ? "\"${singleApp}\"" : "null"

        buildConfigField "boolean", "ReactTestApp_useFabric", project.ext.react.enableFabric.toString()

        resValue "string", "app_name", project.ext.react.appName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        if (project.ext.react.enableNewArchitecture) {
            externalNativeBuild {
                ndkBuild {
                    arguments "APP_PLATFORM=android-${project.ext.minSdkVersion}",
                              "APP_STL=c++_shared",
                              "NDK_TOOLCHAIN_VERSION=clang",
                              "GENERATED_SRC_DIR=${buildDir}/generated/source",
                              "NODE_MODULES_DIR=${reactNativePath}/..",
                              "PROJECT_BUILD_DIR=${buildDir}",
                              "REACT_ANDROID_DIR=${reactNativePath}/ReactAndroid",
                              "REACT_ANDROID_BUILD_DIR=${reactNativePath}/ReactAndroid/build"
                    cFlags "-Wall", "-Werror", "-frtti", "-fexceptions", "-DWITH_INSPECTOR=1"
                    cppFlags "-std=c++17"
                    targets "reacttestapp_appmodules"
                }
            }
            if (!project.ext.react.abiSplit) {
                ndk {
                    abiFilters(*project.ext.react.architectures)
                }
            }
        }
    }

    if (project.ext.react.enableNewArchitecture) {
        externalNativeBuild {
            ndkBuild {
                path "${projectDir}/src/main/jni/Android.mk"
            }
        }

        def reactAndroidProjectDir = project(":ReactAndroid").projectDir
        def packageReactNdkDebugLibs = tasks.register("packageReactNdkDebugLibs", Copy) {
            dependsOn(":ReactAndroid:packageReactNdkDebugLibsForBuck")
            from("${reactAndroidProjectDir}/src/main/jni/prebuilt/lib")
            into("${buildDir}/react-ndk/exported")
        }
        def packageReactNdkReleaseLibs = tasks.register("packageReactNdkReleaseLibs", Copy) {
            dependsOn(":ReactAndroid:packageReactNdkReleaseLibsForBuck")
            from("${reactAndroidProjectDir}/src/main/jni/prebuilt/lib")
            into("${buildDir}/react-ndk/exported")
        }

        afterEvaluate {
            preDebugBuild.dependsOn(packageReactNdkDebugLibs)
            preReleaseBuild.dependsOn(packageReactNdkReleaseLibs)

            // Due to a bug in AGP, we have to explicitly set a dependency
            // between configureNdkBuild* tasks and the preBuild tasks. This can
            // be removed once this issue is resolved:
            // https://issuetracker.google.com/issues/207403732
            configureNdkBuildRelease.dependsOn(preReleaseBuild)
            configureNdkBuildDebug.dependsOn(preDebugBuild)
            project.ext.react.architectures.each { architecture ->
                tasks.findByName("configureNdkBuildDebug[${architecture}]")?.configure {
                    dependsOn("preDebugBuild")
                }
                tasks.findByName("configureNdkBuildRelease[${architecture}]")?.configure {
                    dependsOn("preReleaseBuild")
                }
            }
        }
    }

    lintOptions {
        lintConfig file("lint.xml")
    }

    packagingOptions {
        pickFirst "lib/armeabi-v7a/libc++_shared.so"
        pickFirst "lib/arm64-v8a/libc++_shared.so"
        pickFirst "lib/x86_64/libc++_shared.so"
        pickFirst "lib/x86/libc++_shared.so"
    }

    def signingDebug = project.ext.signingConfigs["debug"]
    def signingRelease = project.ext.signingConfigs["release"]
    if (signingDebug || signingRelease) {
        signingConfigs {
            if (signingDebug) {
                debug {
                    keyAlias signingDebug["keyAlias"]
                    keyPassword signingDebug["keyPassword"]
                    storeFile signingDebug["storeFile"]
                    storePassword signingDebug["storePassword"]
                }
            }
            if (signingRelease) {
                release {
                    keyAlias signingRelease["keyAlias"]
                    keyPassword signingRelease["keyPassword"]
                    storeFile signingRelease["storeFile"]
                    storePassword signingRelease["storePassword"]
                }
            }
        }
    }

    sourceSets {
        if (project.ext.react.enableFlipper) {
            debug.java.srcDirs += "src/flipper/java"
        }

        // TODO: Remove this block when we drop support for 0.63.
        if (project.ext.react.enableFabric) {
            main.java.srcDirs += "src/fabric/java"
        } else {
            main.java.srcDirs += "src/no-fabric/java"
        }

        // TODO: Remove this block when we drop support for 0.65.
        if (project.ext.react.enableNewArchitecture) {
            main.java.srcDirs += "src/turbomodule/java"
        } else {
            main.java.srcDirs += "src/no-turbomodule/java"
        }

        // TODO: Remove this block when we drop support for 0.67.
        // https://github.com/facebook/react-native/commit/ce74aa4ed335d4c36ce722d47937b582045e05c4
        if (reactNativeVersion < 6800) {
            main.java.srcDirs += "src/reactinstanceeventlistener-pre-0.68/java"
        } else {
            main.java.srcDirs += "src/reactinstanceeventlistener-0.68/java"
        }
    }

    splits {
        abi {
            reset()
            enable(project.ext.react.abiSplit)
            universalApk(false)
            include(*project.ext.react.architectures)
        }
    }
}

dependencies {
    implementation project(":support")

    if (project.ext.react.enableHermes) {
        // TODO: Remove this block when we drop support for 0.68.
        if (reactNativeVersion < 6900) {
            def hermesEngineDir =
                findNodeModulesPath("hermes-engine", reactNativePath)
                    ?: findNodeModulesPath("hermesvm", reactNativePath)
            if (hermesEngineDir == null) {
                throw new GradleException("Could not find 'hermes-engine'. Please make sure you've added it to 'package.json'.")
            }

            def hermesAndroidDir = "${hermesEngineDir}/android"
            releaseImplementation files("${hermesAndroidDir}/hermes-release.aar")
            debugImplementation files("${hermesAndroidDir}/hermes-debug.aar")
        } else {
            implementation("com.facebook.react:hermes-engine:+") {
                exclude(group: "com.facebook.fbjni")
            }
        }
    }

    if (project.ext.react.enableNewArchitecture) {
        implementation project(":ReactAndroid")
    } else {
        implementation "com.facebook.react:react-native:+"
    }

    implementation libraries.kotlinStdlibJdk7
    implementation libraries.kotlinStdlibJdk8
    implementation libraries.kotlinReflect

    if (reactNativeVersion < 6800) {
        // androidx.appcompat:appcompat:1.4.0+ breaks TextInput. This was fixed
        // in react-native 0.68. For more details, see
        // https://github.com/facebook/react-native/issues/31572.
        implementation "androidx.appcompat:appcompat:1.3.1"
    } else {
        implementation libraries.androidAppCompat
    }
    implementation libraries.androidCoreKotlinExtensions
    implementation libraries.androidRecyclerView
    implementation libraries.androidSwipeRefreshLayout
    implementation libraries.materialComponents

    implementation libraries.moshiKotlin
    kapt libraries.moshiKotlinCodegen

    testImplementation libraries.junit
    testImplementation libraries.androidJUnitKotlinExtensions
    testImplementation libraries.mockitoInline
    androidTestImplementation libraries.androidJUnit
    androidTestImplementation libraries.androidEspressoCore

    if (project.ext.react.enableFlipper) {
        def flipperVersion = project.ext.react.enableFlipper
        debugImplementation("com.facebook.flipper:flipper:${flipperVersion}") {
            exclude(group: "com.facebook.fbjni")
        }
        debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${flipperVersion}") {
            exclude(group: "com.facebook.flipper")
        }
        debugImplementation("com.facebook.flipper:flipper-network-plugin:${flipperVersion}") {
            exclude(group: "com.facebook.flipper")
        }
    }
}

if (project.ext.react.enableNewArchitecture) {
    configurations.all {
        resolutionStrategy.dependencySubstitution {
            substitute(module("com.facebook.react:react-native"))
                .using(project(":ReactAndroid"))
                .because("On New Architecture, we are building React Native from source")
            substitute(module("com.facebook.react:hermes-engine"))
                .using(project(":ReactAndroid:hermes-engine"))
                .because("On New Architecture, we are building Hermes from source")
        }
    }
}

// `@react-native-community/cli` currently requires this function to be defined.
// See https://github.com/react-native-community/cli/blob/a87fb9014635fe84ab19a1a88d6ecbbc530eb4e2/packages/platform-android/native_modules.gradle#L497
def isNewArchitectureEnabled() {
    return isFabricEnabled(project)
}
