import groovy.json.JsonSlurper

import java.nio.charset.StandardCharsets
import java.nio.file.Paths
import java.security.MessageDigest

ext.manifest = null

ext.findFile = { fileName ->
    def currentDirPath = rootDir == null ? null : rootDir.toString()

    while (currentDirPath != null) {
        def currentDir = file(currentDirPath)
        def requestedFile = Paths.get(currentDirPath, fileName).toFile()

        if (requestedFile.exists()) {
            return requestedFile
        }

        currentDirPath = currentDir.getParent()
    }

    return null
}

/**
 * Finds the path of the installed npm package with the given name using Node's
 * module resolution algorithm, which searches "node_modules" directories up to
 * the file system root. This handles various cases, including:
 *
 *   - Working in the open-source RN repo:
 *       Gradle: /path/to/react-native/ReactAndroid
 *       Node module: /path/to/react-native/node_modules/[package]
 *
 *   - Installing RN as a dependency of an app and searching for hoisted
 *     dependencies:
 *       Gradle: /path/to/app/node_modules/react-native/ReactAndroid
 *       Node module: /path/to/app/node_modules/[package]
 *
 *   - Working in a larger repo (e.g., Facebook) that contains RN:
 *       Gradle: /path/to/repo/path/to/react-native/ReactAndroid
 *       Node module: /path/to/repo/node_modules/[package]
 *
 * The search begins at the given base directory (a File object). The returned
 * path is a string.
 */
ext.findNodeModulesPath = { packageName, baseDir ->
    def basePath = baseDir.toPath().normalize()

    // Node's module resolution algorithm searches up to the root directory,
    // after which the base path will be null
    while (basePath) {
        def candidatePath = Paths.get(basePath.toString(), "node_modules", packageName)
        if (candidatePath.toFile().exists()) {
            return candidatePath.toString()
        }

        basePath = basePath.getParent()
    }

    return null
}

ext.getAppName = {
    def manifest = getManifest()
    if (manifest != null) {
        def displayName = manifest["displayName"]
        if (displayName instanceof String) {
            return displayName
        }

        def name = manifest["name"]
        if (name instanceof String) {
            return name
        }
    }

    return "ReactTestApp"
}

ext.getApplicationId = {
    def manifest = getManifest()
    if (manifest != null) {
        def config = manifest["android"]
        if (config instanceof Object && config.containsKey("package")) {
            return config["package"]
        }
    }

    return "com.microsoft.reacttestapp"
}

ext.getArchitectures = {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

ext.getFlipperRecommendedVersion = { baseDir ->
    def reactNativePath = findNodeModulesPath("react-native", baseDir)
    def props = new Properties()
    file("${reactNativePath}/template/android/gradle.properties").withInputStream {
        props.load(it)
    }

    return props.getProperty("FLIPPER_VERSION")
}

ext.getFlipperVersion = { baseDir ->
    def recommendedFlipperVersion = getFlipperRecommendedVersion(baseDir)
    if (recommendedFlipperVersion == null) {
        // Current React Native version doesn't support Flipper
        return null
    }

    // Prefer user specified Flipper version
    if (project.hasProperty("FLIPPER_VERSION")) {
        def flipperVersion = project.getProperty("FLIPPER_VERSION")
        return flipperVersion == "false" ? null : flipperVersion
    }

    // Use the recommended Flipper version
    return recommendedFlipperVersion
}

ext.getManifest = {
    if (manifest == null) {
        def manifestFile = findFile("app.json")
        if (manifestFile == null) {
            return null
        }

        manifest = new JsonSlurper().parseText(manifestFile.text)
    }
    return manifest
}

ext.getPackageVersion = { packageName, baseDir ->
    def packagePath = findNodeModulesPath(packageName, baseDir)
    def packageJson = file("${packagePath}/package.json")
    def manifest = new JsonSlurper().parseText(packageJson.text)
    return manifest["version"]
}

ext.getPackageVersionNumber = { packageName, baseDir ->
    def version = getPackageVersion(packageName, baseDir)
    def (major, minor, patch) = version.findAll(/\d+/)
    return (major as int) * 10000 + (minor as int) * 100 + (patch as int)
}

ext.getSigningConfigs = {
    def safeSetMap = { varName, map, prop, defaultVal ->
        map[varName] = prop.containsKey(varName) ? prop.get(varName) : defaultVal
    }

    def definedConfigs = new LinkedHashMap<String, Object>()
    def manifestFile = findFile("app.json")
    if (manifestFile != null) {
        def manifest = new JsonSlurper().parseText(manifestFile.text)

        if (!manifest["android"]) {
            return definedConfigs
        }

        def signingConfigs = manifest["android"]["signingConfigs"]
        if (signingConfigs) {
            signingConfigs.each { config ->
                def configName = config.key
                def props = config.value
                def pathStoreFile = props.containsKey("storeFile")
                    ? Paths.get(manifestFile.getParent(), props.get("storeFile")).normalize().toAbsolutePath()
                    : null
                if (pathStoreFile == null || !file(pathStoreFile).exists() || !file(pathStoreFile).isFile()) {
                    throw new FileNotFoundException("Signing storeFile for flavor ${configName} is missing: " + pathStoreFile)
                }

                def signConfig = new LinkedHashMap<String, Object>()
                safeSetMap("keyAlias", signConfig, props, "androiddebugkey")
                safeSetMap("keyPassword", signConfig, props, "android")
                safeSetMap("storePassword", signConfig, props, "android")
                signConfig["storeFile"] = pathStoreFile.toFile()
                definedConfigs[configName] = signConfig
            }
        }
    }

    return definedConfigs
}

ext.getSingleAppMode = {
    def manifest = getManifest()
    if (manifest != null) {
        def singleApp = manifest["singleApp"]
        if (singleApp instanceof String) {
            return singleApp
        }
    }

    return false
}

ext.getVersionCode = {
    def manifest = getManifest()
    if (manifest != null) {
        def config = manifest["android"]
        if (config instanceof Object && config.containsKey("versionCode")) {
            return config["versionCode"]
        }
    }

    return 1
}

ext.getVersionName = {
    def manifest = getManifest()
    if (manifest != null) {
        def version = manifest["version"]
        if (version instanceof String) {
            return version
        }
    }

    return "1.0"
}

ext.isFabricEnabled = { project ->
    if (isNewArchitectureEnabled(project)) {
        return true
    }

    if (isPropertySet(project, "USE_FABRIC", "1")) {
        def version = getPackageVersionNumber("react-native", project.rootDir)
        return version == 0 || version >= 6800
    }

    return false
}

ext.isNewArchitectureEnabled = { project ->
    if (isPropertySet(project, "newArchEnabled", "true")) {
        def version = getPackageVersionNumber("react-native", project.rootDir)
        return version == 0 || version >= 6800
    }
    return false
}

ext.isPropertySet = { project, propertyName, value ->
    return project.hasProperty(propertyName) && project.getProperty(propertyName) == value
}

ext.validateManifest = { baseDir ->
    String[] cmd = ["node", "-e", "require('react-native-test-app/scripts/validate-manifest').validate('stdout')"]
    def process = Runtime.runtime.exec(cmd, null, baseDir)
    process.waitFor()

    def error = process.exitValue() != 0
    def inputStream = error ? process.getErrorStream() : process.getInputStream()
    def output = new ByteArrayOutputStream()
    def buffer = new byte[1024]
    def length = inputStream.read(buffer)
    while (length > 0) {
        output.write(buffer, 0, length)
        length = inputStream.read(buffer)
    }

    def result = output.toString(StandardCharsets.UTF_8.name()).trim()
    if (error) {
        throw new GradleException(result);
    }

    def checksum = MessageDigest.getInstance("SHA-256").digest(output.toByteArray())
    return [result, checksum.encodeHex().toString()]
}
