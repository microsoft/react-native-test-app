// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`gatherConfig() flattens configuration for a single platform only 1`] = `
{
  "dependencies": {},
  "files": {
    ".gitignore": {
      "source": "example/.gitignore",
    },
    ".watchmanconfig": {
      "source": "node_modules/react-native/template/_watchmanconfig",
    },
    "Podfile": "require_relative '../test_app'

use_flipper! false if ENV['USE_FLIPPER'] == '0'

workspace 'Test.xcworkspace'

use_test_app!
",
    "babel.config.js": {
      "source": "node_modules/react-native/template/babel.config.js",
    },
    "metro.config.js": {
      "source": "example/metro.config.js",
    },
    "react-native.config.js": "const project = (() => {
  try {
    const { configureProjects } = require("react-native-test-app");
    return configureProjects({
      ios: {
        sourceDir: ".",
      },
    });
  } catch (_) {
    return undefined;
  }
})();

module.exports = {
  ...(project ? { project } : undefined),
};
",
  },
  "oldFiles": [
    "Podfile.lock",
    "Pods",
    "Test.xcodeproj",
    "Test.xcworkspace",
  ],
  "scripts": {
    "build:ios": "mkdirp dist && react-native bundle --entry-file index.js --platform ios --dev true --bundle-output dist/main.ios.jsbundle --assets-dest dist",
    "ios": "react-native run-ios",
    "start": "react-native start",
  },
}
`;

exports[`gatherConfig() flattens configuration for a single platform only 2`] = `
{
  "dependencies": {},
  "files": {
    ".gitignore": {
      "source": "example/.gitignore",
    },
    ".watchmanconfig": {
      "source": "node_modules/react-native/template/_watchmanconfig",
    },
    "android/build.gradle": "buildscript {
    def androidTestAppDir = "../../android"
    apply(from: "\${androidTestAppDir}/dependencies.gradle")

    repositories {
        mavenCentral()
        google()
    }

    dependencies {
        getReactNativeDependencies().each { dependency ->
            classpath(dependency)
        }
    }
}

allprojects {
    repositories {
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url("\${rootDir}/../react-native/android")
        }
        mavenCentral()
        google()
    }
}
",
    "android/gradle.properties": {
      "source": "example/android/gradle.properties",
    },
    "android/gradle/wrapper/gradle-wrapper.jar": {
      "source": "example/android/gradle/wrapper/gradle-wrapper.jar",
    },
    "android/gradle/wrapper/gradle-wrapper.properties": {
      "source": "example/android/gradle/wrapper/gradle-wrapper.properties",
    },
    "android/gradlew": {
      "source": "example/android/gradlew",
    },
    "android/gradlew.bat": {
      "source": "example/android/gradlew.bat",
    },
    "android/settings.gradle": "pluginManagement {
    repositories {
        gradlePluginPortal()
        mavenCentral()
        google()
    }
}

rootProject.name = "Test"

apply(from: "../../test-app.gradle")
applyTestAppSettings(settings)
",
    "babel.config.js": {
      "source": "node_modules/react-native/template/babel.config.js",
    },
    "ios/Podfile": "require_relative '../../test_app'

use_flipper! false if ENV['USE_FLIPPER'] == '0'

workspace 'Test.xcworkspace'

use_test_app!
",
    "metro.config.js": {
      "source": "example/metro.config.js",
    },
    "react-native.config.js": "const project = (() => {
  try {
    const { configureProjects } = require("react-native-test-app");
    return configureProjects({
      android: {
        sourceDir: "android",
      },
      ios: {
        sourceDir: "ios",
      },
      windows: {
        sourceDir: "windows",
        solutionFile: "windows/Test.sln",
      },
    });
  } catch (_) {
    return undefined;
  }
})();

module.exports = {
  ...(project ? { project } : undefined),
};
",
  },
  "oldFiles": [
    "ios/Podfile.lock",
    "ios/Pods",
    "ios/Test.xcodeproj",
    "ios/Test.xcworkspace",
  ],
  "scripts": {
    "android": "react-native run-android",
    "build:android": "mkdirp dist/res && react-native bundle --entry-file index.js --platform android --dev true --bundle-output dist/main.android.jsbundle --assets-dest dist/res",
    "build:ios": "mkdirp dist && react-native bundle --entry-file index.js --platform ios --dev true --bundle-output dist/main.ios.jsbundle --assets-dest dist",
    "ios": "react-native run-ios",
    "start": "react-native start",
  },
}
`;

exports[`gatherConfig() returns common configuration 1`] = `
{
  "dependencies": {},
  "files": {
    ".gitignore": {
      "source": "example/.gitignore",
    },
    ".watchmanconfig": {
      "source": "node_modules/react-native/template/_watchmanconfig",
    },
    "babel.config.js": {
      "source": "node_modules/react-native/template/babel.config.js",
    },
    "common/.gitignore": {
      "source": "example/.gitignore",
    },
    "common/.watchmanconfig": {
      "source": "node_modules/react-native/template/_watchmanconfig",
    },
    "common/babel.config.js": {
      "source": "node_modules/react-native/template/babel.config.js",
    },
    "common/metro.config.js": {
      "source": "example/metro.config.js",
    },
    "common/react-native.config.js": "const project = (() => {
  try {
    const { configureProjects } = require("react-native-test-app");
    return configureProjects({
      android: {
        sourceDir: "android",
      },
      ios: {
        sourceDir: "ios",
      },
      windows: {
        sourceDir: "windows",
        solutionFile: "windows/Test.sln",
      },
    });
  } catch (_) {
    return undefined;
  }
})();

module.exports = {
  ...(project ? { project } : undefined),
};
",
    "metro.config.js": {
      "source": "example/metro.config.js",
    },
    "react-native.config.js": "const project = (() => {
  try {
    const { configureProjects } = require("react-native-test-app");
    return configureProjects({
      android: {
        sourceDir: "android",
      },
      ios: {
        sourceDir: "ios",
      },
      windows: {
        sourceDir: "windows",
        solutionFile: "windows/Test.sln",
      },
    });
  } catch (_) {
    return undefined;
  }
})();

module.exports = {
  ...(project ? { project } : undefined),
};
",
  },
  "oldFiles": [],
  "scripts": {
    "start": "react-native start",
  },
}
`;

exports[`gatherConfig() returns configuration for a single platform 1`] = `
{
  "dependencies": {},
  "files": {
    ".gitignore": {
      "source": "example/.gitignore",
    },
    ".watchmanconfig": {
      "source": "node_modules/react-native/template/_watchmanconfig",
    },
    "babel.config.js": {
      "source": "node_modules/react-native/template/babel.config.js",
    },
    "ios/Podfile": "require_relative '../../test_app'

use_flipper! false if ENV['USE_FLIPPER'] == '0'

workspace 'Test.xcworkspace'

use_test_app!
",
    "metro.config.js": {
      "source": "example/metro.config.js",
    },
    "react-native.config.js": "const project = (() => {
  try {
    const { configureProjects } = require("react-native-test-app");
    return configureProjects({
      android: {
        sourceDir: "android",
      },
      ios: {
        sourceDir: "ios",
      },
      windows: {
        sourceDir: "windows",
        solutionFile: "windows/Test.sln",
      },
    });
  } catch (_) {
    return undefined;
  }
})();

module.exports = {
  ...(project ? { project } : undefined),
};
",
  },
  "oldFiles": [
    "ios/Podfile.lock",
    "ios/Pods",
    "ios/Test.xcodeproj",
    "ios/Test.xcworkspace",
  ],
  "scripts": {
    "build:ios": "mkdirp dist && react-native bundle --entry-file index.js --platform ios --dev true --bundle-output dist/main.ios.jsbundle --assets-dest dist",
    "ios": "react-native run-ios",
    "start": "react-native start",
  },
}
`;

exports[`gatherConfig() returns configuration for all platforms 1`] = `
{
  "dependencies": {
    "react-native-macos": "^0.68.0",
    "react-native-windows": "^0.68.0",
  },
  "files": {
    ".gitignore": {
      "source": "example/.gitignore",
    },
    ".watchmanconfig": {
      "source": "node_modules/react-native/template/_watchmanconfig",
    },
    "android/build.gradle": "buildscript {
    def androidTestAppDir = "../../android"
    apply(from: "\${androidTestAppDir}/dependencies.gradle")

    repositories {
        mavenCentral()
        google()
    }

    dependencies {
        getReactNativeDependencies().each { dependency ->
            classpath(dependency)
        }
    }
}

allprojects {
    repositories {
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url("\${rootDir}/../react-native/android")
        }
        mavenCentral()
        google()
    }
}
",
    "android/gradle.properties": {
      "source": "example/android/gradle.properties",
    },
    "android/gradle/wrapper/gradle-wrapper.jar": {
      "source": "example/android/gradle/wrapper/gradle-wrapper.jar",
    },
    "android/gradle/wrapper/gradle-wrapper.properties": {
      "source": "example/android/gradle/wrapper/gradle-wrapper.properties",
    },
    "android/gradlew": {
      "source": "example/android/gradlew",
    },
    "android/gradlew.bat": {
      "source": "example/android/gradlew.bat",
    },
    "android/settings.gradle": "pluginManagement {
    repositories {
        gradlePluginPortal()
        mavenCentral()
        google()
    }
}

rootProject.name = "Test"

apply(from: "../../test-app.gradle")
applyTestAppSettings(settings)
",
    "babel.config.js": {
      "source": "node_modules/react-native/template/babel.config.js",
    },
    "ios/Podfile": "require_relative '../../test_app'

use_flipper! false if ENV['USE_FLIPPER'] == '0'

workspace 'Test.xcworkspace'

use_test_app!
",
    "macos/Podfile": "require_relative '../../macos/test_app'

workspace 'Test.xcworkspace'

use_test_app!
",
    "metro.config.js": {
      "source": "example/metro.config.js",
    },
    "react-native.config.js": "const project = (() => {
  try {
    const { configureProjects } = require("react-native-test-app");
    return configureProjects({
      android: {
        sourceDir: "android",
      },
      ios: {
        sourceDir: "ios",
      },
      windows: {
        sourceDir: "windows",
        solutionFile: "windows/Test.sln",
      },
    });
  } catch (_) {
    return undefined;
  }
})();

module.exports = {
  ...(project ? { project } : undefined),
};
",
    "windows/.gitignore": {
      "source": "example/windows/.gitignore",
    },
  },
  "oldFiles": [
    "ios/Podfile.lock",
    "ios/Pods",
    "ios/Test.xcodeproj",
    "ios/Test.xcworkspace",
    "macos/Podfile.lock",
    "macos/Pods",
    "macos/Test.xcodeproj",
    "macos/Test.xcworkspace",
    "windows/Test.sln",
    "windows/Test.vcxproj",
    "windows/Test/Test.vcxproj",
  ],
  "scripts": {
    "android": "react-native run-android",
    "build:android": "mkdirp dist/res && react-native bundle --entry-file index.js --platform android --dev true --bundle-output dist/main.android.jsbundle --assets-dest dist/res",
    "build:ios": "mkdirp dist && react-native bundle --entry-file index.js --platform ios --dev true --bundle-output dist/main.ios.jsbundle --assets-dest dist",
    "build:macos": "mkdirp dist && react-native bundle --entry-file index.js --platform macos --dev true --bundle-output dist/main.macos.jsbundle --assets-dest dist",
    "build:windows": "mkdirp dist && react-native bundle --entry-file index.js --platform windows --dev true --bundle-output dist/main.windows.bundle --assets-dest dist",
    "ios": "react-native run-ios",
    "macos": "react-native run-macos --scheme Test",
    "start": "react-native start",
    "windows": "react-native run-windows --sln windows/Test.sln",
  },
}
`;

exports[`gatherConfig() returns configuration for arbitrary platforms 1`] = `
{
  "dependencies": {},
  "files": {
    ".gitignore": {
      "source": "example/.gitignore",
    },
    ".watchmanconfig": {
      "source": "node_modules/react-native/template/_watchmanconfig",
    },
    "android/build.gradle": "buildscript {
    def androidTestAppDir = "../../android"
    apply(from: "\${androidTestAppDir}/dependencies.gradle")

    repositories {
        mavenCentral()
        google()
    }

    dependencies {
        getReactNativeDependencies().each { dependency ->
            classpath(dependency)
        }
    }
}

allprojects {
    repositories {
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url("\${rootDir}/../react-native/android")
        }
        mavenCentral()
        google()
    }
}
",
    "android/gradle.properties": {
      "source": "example/android/gradle.properties",
    },
    "android/gradle/wrapper/gradle-wrapper.jar": {
      "source": "example/android/gradle/wrapper/gradle-wrapper.jar",
    },
    "android/gradle/wrapper/gradle-wrapper.properties": {
      "source": "example/android/gradle/wrapper/gradle-wrapper.properties",
    },
    "android/gradlew": {
      "source": "example/android/gradlew",
    },
    "android/gradlew.bat": {
      "source": "example/android/gradlew.bat",
    },
    "android/settings.gradle": "pluginManagement {
    repositories {
        gradlePluginPortal()
        mavenCentral()
        google()
    }
}

rootProject.name = "Test"

apply(from: "../../test-app.gradle")
applyTestAppSettings(settings)
",
    "babel.config.js": {
      "source": "node_modules/react-native/template/babel.config.js",
    },
    "ios/Podfile": "require_relative '../../test_app'

use_flipper! false if ENV['USE_FLIPPER'] == '0'

workspace 'Test.xcworkspace'

use_test_app!
",
    "metro.config.js": {
      "source": "example/metro.config.js",
    },
    "react-native.config.js": "const project = (() => {
  try {
    const { configureProjects } = require("react-native-test-app");
    return configureProjects({
      android: {
        sourceDir: "android",
      },
      ios: {
        sourceDir: "ios",
      },
      windows: {
        sourceDir: "windows",
        solutionFile: "windows/Test.sln",
      },
    });
  } catch (_) {
    return undefined;
  }
})();

module.exports = {
  ...(project ? { project } : undefined),
};
",
  },
  "oldFiles": [
    "ios/Podfile.lock",
    "ios/Pods",
    "ios/Test.xcodeproj",
    "ios/Test.xcworkspace",
  ],
  "scripts": {
    "android": "react-native run-android",
    "build:android": "mkdirp dist/res && react-native bundle --entry-file index.js --platform android --dev true --bundle-output dist/main.android.jsbundle --assets-dest dist/res",
    "build:ios": "mkdirp dist && react-native bundle --entry-file index.js --platform ios --dev true --bundle-output dist/main.ios.jsbundle --assets-dest dist",
    "ios": "react-native run-ios",
    "start": "react-native start",
  },
}
`;
