name: build
on:
  push:
    branches:
      - trunk
  pull_request:
  schedule:
    # nightly builds against react-native@nightly at 5:00
    - cron: 0 5 * * *
jobs:
  lint-commit:
    name: "lint commit message"
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up toolchain
        uses: ./.github/actions/setup-toolchain
      - name: Install npm dependencies
        uses: ./.github/actions/yarn
      - name: Lint commit message
        run: |
          yarn lint:commit
  lint-test:
    name: "lint + test"
    runs-on: macos-latest
    if: ${{ github.event_name != 'schedule' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 64
      - name: Set up toolchain
        uses: ./.github/actions/setup-toolchain
        with:
          platform: macos
      - name: Deduplicate packages
        run: |
          yarn dedupe --check
      - name: Install npm dependencies
        uses: ./.github/actions/yarn
      - name: ClangFormat
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # TODO: GITHUB_TOKEN is not set if a PR comes from a forked repo.
          #       Ignore errors until we can create a GitHub PAT from a system
          #       account.
          scripts/clang-format-diff.sh || true
      - name: CocoaPods
        run: |
          echo "::add-matcher::.github/rubocop.json"
          bundle exec rubocop
          echo "::remove-matcher owner=rubocop::"
          echo "::add-matcher::.github/minitest.json"
          bundle exec ruby -Ilib:test test/test_test_app.rb
          echo "::remove-matcher owner=minitest::"
      - name: JavaScript
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # TODO: GITHUB_TOKEN is not set if a PR comes from a forked repo.
          #       Ignore errors until we can create a GitHub PAT from a system
          #       account.
          scripts/prettier-diff.js $(git ls-files '*.js' '*.yml' 'test/**/*.json') || true
          echo "::add-matcher::.github/eslint-stylish.json"
          yarn lint:js
          echo "::remove-matcher owner=eslint-stylish::"
          yarn tsc
          yarn test:js --ci
      - name: ktlint
        run: |
          brew install ktlint
          echo "::add-matcher::.github/ktlint.json"
          yarn lint:kt
          echo "::remove-matcher owner=ktlint::"
      - name: SwiftFormat
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "::add-matcher::.github/swiftformat.json"
          yarn format:swift --lint
          echo "::remove-matcher owner=swiftformat::"
      - name: SwiftLint
        run: |
          echo "::add-matcher::.github/swiftlint.json"
          swiftlint
          echo "::remove-matcher owner=swiftlint::"
  ios:
    name: "iOS"
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up toolchain
        uses: ./.github/actions/setup-toolchain
      - name: Set up react-native@nightly
        if: ${{ github.event_name == 'schedule' }}
        run: |
          # `nightly` currently doesn't build due to use of version numbers that
          # are incompatible with CocoaPods. See
          # https://github.com/facebook/react-native/issues/30036 and
          # https://github.com/microsoft/react-native-macos/issues/620 for more
          # details.
          npm run set-react-version main
          rm example/ios/Podfile.lock
      - name: Install npm dependencies
        uses: ./.github/actions/yarn
        with:
          immutable: ${{ github.event_name != 'schedule' }}
      - name: Bundle JavaScript
        run: |
          yarn build:ios || yarn build:ios
        working-directory: example
      - name: Install Pods
        uses: ./.github/actions/cocoapods
        with:
          project-directory: ios
          working-directory: example
      - name: Build
        run: |
          ../scripts/xcodebuild.sh ios/Example.xcworkspace build-for-testing
        working-directory: example
      - name: Test `react-native config`
        run: |
          yarn jest
        working-directory: example
      - name: Test
        run: |
          ../scripts/xcodebuild.sh ios/Example.xcworkspace test-without-building
        working-directory: example
  ios-template:
    name: "iOS [template]"
    strategy:
      matrix:
        template: [all, ios]
    runs-on: macos-latest
    if: ${{ github.event_name != 'schedule' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up toolchain
        uses: ./.github/actions/setup-toolchain
      - name: Initialize test app
        uses: ./.github/actions/init-test-app
        with:
          platform: ${{ matrix.template }}
      - name: Bundle JavaScript
        run: |
          yarn build:ios || yarn build:ios
        working-directory: template-example
      - name: Determine project directory
        id: configure
        run: |
          if [[ ${{ matrix.template }} == ios ]]; then
            echo '::set-output name=project-directory::.'
          else
            echo '::set-output name=project-directory::ios'
          fi
      - name: Install Pods
        run: |
          pod install --project-directory=${{ steps.configure.outputs.project-directory }}
        working-directory: template-example
      - name: Build
        run: |
          ../scripts/xcodebuild.sh ${{ steps.configure.outputs.project-directory }}/TemplateExample.xcworkspace build
        working-directory: template-example
      - name: react-native run-ios
        run: |
          ../test/react-native.js run-ios
        working-directory: template-example
  android:
    name: "Android"
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    if: ${{ github.event_name != 'schedule' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up toolchain
        uses: ./.github/actions/setup-toolchain
        with:
          platform: android
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Set up react-native@nightly
        if: ${{ github.event_name == 'schedule' }}
        run: |
          npm run set-react-version nightly
        shell: bash
      - name: Install npm dependencies
        uses: ./.github/actions/yarn
        with:
          immutable: ${{ github.event_name != 'schedule' }}
      - name: Test `react-native config`
        run: |
          yarn jest
        working-directory: example
      - name: Bundle JavaScript
        run: |
          yarn build:android || yarn build:android
        shell: bash
        working-directory: example
      - name: Build
        run: |
          ./gradlew clean build check test
        shell: bash
        working-directory: example/android
  android-template:
    name: "Android [template]"
    strategy:
      matrix:
        template: [all, android]
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    if: ${{ github.event_name != 'schedule' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up toolchain
        uses: ./.github/actions/setup-toolchain
        with:
          platform: android
      - name: Initialize test app
        uses: ./.github/actions/init-test-app
        with:
          platform: ${{ matrix.template }}
      - name: Bundle JavaScript
        run: |
          yarn build:android || yarn build:android
        shell: bash
        working-directory: template-example
      - name: Build
        run: |
          [[ -d android ]] && pushd android 1> /dev/null
          ./gradlew clean build check test
        shell: bash
        working-directory: template-example
      - name: react-native run-android
        run: |
          ../test/react-native.js run-android
        working-directory: template-example
  macos:
    name: "macOS"
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up toolchain
        uses: ./.github/actions/setup-toolchain
      - name: Set up react-native@canary
        if: ${{ github.event_name == 'schedule' }}
        run: |
          npm run set-react-version canary-macos
          rm example/macos/Podfile.lock
      - name: Install npm dependencies
        uses: ./.github/actions/yarn
        with:
          immutable: ${{ github.event_name != 'schedule' }}
      - name: Bundle JavaScript
        run: |
          yarn build:macos || yarn build:macos
        working-directory: example
      - name: Install Pods
        uses: ./.github/actions/cocoapods
        with:
          project-directory: macos
          working-directory: example
      - name: Build
        run: |
          ../scripts/xcodebuild.sh macos/Example.xcworkspace build-for-testing
        working-directory: example
      - name: Test `react-native config`
        run: |
          yarn jest
        working-directory: example
      - name: Test
        run: |
          ../scripts/xcodebuild.sh macos/Example.xcworkspace test-without-building
        working-directory: example
      - name: Build ARM
        run: |
          ../scripts/xcodebuild.sh macos/Example.xcworkspace clean
          ../scripts/xcodebuild.sh macos/Example.xcworkspace build ARCHS=arm64
        working-directory: example
  macos-template:
    name: "macOS [template]"
    strategy:
      matrix:
        template: [all, macos]
    runs-on: macos-latest
    if: ${{ github.event_name != 'schedule' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up toolchain
        uses: ./.github/actions/setup-toolchain
      - name: Initialize test app
        uses: ./.github/actions/init-test-app
        with:
          platform: ${{ matrix.template }}
      - name: Bundle JavaScript
        run: |
          yarn build:macos || yarn build:macos
        working-directory: template-example
      - name: Determine project directory
        id: configure
        run: |
          if [[ ${{ matrix.template }} == macos ]]; then
            echo '::set-output name=project-directory::.'
          else
            echo '::set-output name=project-directory::macos'
          fi
      - name: Install Pods
        run: |
          pod install --project-directory=${{ steps.configure.outputs.project-directory }}
        working-directory: template-example
      - name: Build
        run: |
          ../scripts/xcodebuild.sh ${{ steps.configure.outputs.project-directory }}/TemplateExample.xcworkspace build
        working-directory: template-example
  windows:
    name: "Windows"
    runs-on: windows-latest
    strategy:
      matrix:
        platform: [ARM64, x64]
        configuration: [Debug, Release]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up toolchain
        uses: ./.github/actions/setup-toolchain
        with:
          platform: windows
      - name: Set up react-native@canary
        if: ${{ github.event_name == 'schedule' }}
        run: |
          npm run set-react-version canary-windows
        shell: bash
      - name: Install npm dependencies
        uses: ./.github/actions/yarn
        with:
          immutable: ${{ github.event_name != 'schedule' }}
      - name: Build bundle and create solution
        run: |
          yarn build:windows
          yarn install-windows-test-app --use-nuget
        working-directory: example
      - name: Test `react-native config`
        run: |
          yarn jest
        working-directory: example
      - name: Install NuGet packages
        run: |
          nuget restore
        working-directory: example/windows
      - name: Build
        run: |
          ../../scripts/MSBuild.ps1 -Configuration ${{ matrix.configuration }} -Platform ${{ matrix.platform }} Example.sln
        working-directory: example/windows
      - name: Test
        if: ${{ matrix.platform == 'x64' }}
        run: |
          ../../../scripts/MSBuild.ps1 -Configuration ${{ matrix.configuration }} -Platform ${{ matrix.platform }} -Target Build ReactTestAppTests.vcxproj
          VSTest.Console.exe ${{ matrix.platform }}\${{ matrix.configuration }}\ReactTestAppTests.dll
        working-directory: example/windows/ReactTestAppTests
  windows-template:
    name: "Windows [template]"
    runs-on: windows-latest
    if: ${{ github.event_name != 'schedule' }}
    strategy:
      matrix:
        template: [all, windows]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up toolchain
        uses: ./.github/actions/setup-toolchain
        with:
          platform: windows
      - name: Initialize test app
        uses: ./.github/actions/init-test-app
        with:
          platform: ${{ matrix.template }}
      - name: Build bundle and create solution
        run: |
          yarn build:windows
          if ("${{ matrix.template }}" -eq "all") { yarn install-windows-test-app }
          else { yarn install-windows-test-app --project-directory=. }
        working-directory: template-example
      - name: Install NuGet packages
        run: |
          if ("${{ matrix.template }}" -eq "all") { cd windows }
          nuget restore
        working-directory: template-example
      - name: Build
        run: |
          if ("${{ matrix.template }}" -eq "all") { ../scripts/MSBuild.ps1 windows/TemplateExample.sln }
          else { ../scripts/MSBuild.ps1 TemplateExample.sln }
        working-directory: template-example
  release:
    needs:
      [
        lint-test,
        ios,
        ios-template,
        android,
        android-template,
        macos,
        macos-template,
        windows,
        windows-template,
      ]
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'schedule' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up toolchain
        uses: ./.github/actions/setup-toolchain
      - name: Install npm dependencies
        uses: ./.github/actions/yarn
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npx semantic-release
  autobot:
    name: "Autobot"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Label
        uses: actions/labeler@v3.0.2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          sync-labels: true
        continue-on-error: true
      - name: Checkout
        uses: actions/checkout@v2
        continue-on-error: true
      - name: /yarn.lock changes
        uses: Simek/yarn-lock-changes@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
