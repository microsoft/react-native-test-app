import groovy.json.JsonSlurper
import org.gradle.initialization.DefaultSettings

private static void apply(Settings settings) {
    def projectDir = settings.findNodeModulesPath(settings.rootDir, "react-native-test-app")

    settings.include(":app")
    settings.project(":app")
            .projectDir = new File("${projectDir}/android/app")
}

def scriptDir = buildscript.sourceFile.getParent()

apply from: "$scriptDir/android/test-app-util.gradle"
apply from: "$scriptDir/android/test-app-native-modules.gradle"

ext.applyTestAppSettings = { DefaultSettings defaultSettings ->
    apply(defaultSettings)
    applyNativeModulesSettingsGradle(defaultSettings)
}

ext.applyTestAppModule = { Project project, String packageName ->
    applyNativeModulesAppBuildGradle(project, packageName)

    def manifestFile = findFile("app.json")
    def manifest = new JsonSlurper().parseText(manifestFile.text)

    def resources = manifest["resources"]

    def androidResources = null
    if (resources instanceof List) {
        androidResources = resources
    } else if (resources.containsKey("android")) {
        androidResources = resources["android"]
    } else {
        throw new IllegalArgumentException("The \"resources\" property of the app.json has " +
            "to be either a list of paths, or must contain a nested list with the \"android\" key")
    }

    def projectRoot = manifestFile.getParent()
    def androidResourceFiles = androidResources
        .collect { file("$projectRoot/$it") }

    def androidResDir = androidResourceFiles
        .find { it.isDirectory() && it.name == "res" }

    androidResourceFiles.remove(androidResDir)

    def generatedAssetsDir = file("${buildDir}/generated/rncli/src/main/assets/")
    generatedAssetsDir.mkdirs()

    def generatedResDir = file("${buildDir}/generated/rncli/src/main/res/")
    generatedResDir.mkdirs()

    task copyAssets(type: Copy) {
        androidResourceFiles.each {
            from it
        }

        into generatedAssetsDir
    }

    task copyManifest(type: Copy) {
        def generatedRawDir = file("$generatedResDir/raw")
        generatedRawDir.mkdirs()

        from manifestFile
        into generatedRawDir
    }

    task copyResources(type: Copy) {
        from androidResDir
        into generatedResDir
    }

    preBuild.dependsOn(copyManifest)
    preBuild.dependsOn(copyAssets)
    preBuild.dependsOn(copyResources)

    android {
        sourceSets {
            main {
                assets.srcDirs += generatedAssetsDir
                res.srcDirs += generatedResDir
            }
        }
    }
}
