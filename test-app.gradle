import groovy.json.JsonSlurper
import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.initialization.DefaultSettings

import java.nio.file.Paths

private static void applyConfigPlugins(String testAppDir, File rootDir) {
    String[] patch = ["node", "${testAppDir}/scripts/apply-config-plugins.mjs", "--android"]
    def stderr = new StringBuffer()
    def proc = Runtime.runtime.exec(patch, null, rootDir)
    proc.waitForProcessOutput(null, stderr)
    if (proc.exitValue() != 0) {
        throw new RuntimeException("Failed to apply config plugins:\n${stderr}")
    }
}

private static boolean isFontFile(File file) {
    // https://github.com/facebook/react-native/blob/3dfedbc1aec18a4255e126fde96d5dc7b1271ea7/packages/react-native/ReactAndroid/src/main/java/com/facebook/react/common/assets/ReactFontManager.java#L28
    return [".otf", ".ttf"].any { file.name.endsWith(it) }
}

private static boolean isMediaFile(File file) {
    // https://developer.android.com/media/platform/supported-formats
    return [
        ".3gp",
        ".aac",
        ".amr",
        ".flac",
        ".imy",
        ".m4a",
        ".mid",
        ".mkv",
        ".mp3",
        ".mp4",
        ".mxmf",
        ".ogg",
        ".ota",
        ".rtttl",
        ".rtx",
        ".ts",
        ".wav",
        ".webm",
        ".xmf",
    ].any { file.name.endsWith(it) }
}

def testAppDir = buildscript.sourceFile.getParent()
apply(from: "${testAppDir}/android/test-app-util.gradle")

checkEnvironment(rootDir)

def reactNativeDir = file(findNodeModulesPath("react-native", rootDir))
def cliAndroidDir = findNodeModulesPath("@react-native-community/cli-platform-android", reactNativeDir)

if (findNodeModulesPath("@expo/config-plugins", rootDir)) {
    applyConfigPlugins(testAppDir, rootDir)
}

apply(from: "${cliAndroidDir}/native_modules.gradle")

ext.applyTestAppSettings = { DefaultSettings settings ->
    settings.include(":app")
    settings.include(":support")

    settings.project(":app")
        .projectDir = file("${testAppDir}/android/app")
    settings.project(":support")
        .projectDir = file("${testAppDir}/android/support")

    def reactNativeGradlePlugin =
        findNodeModulesPath("@react-native/gradle-plugin", reactNativeDir)  // >= 0.72
            ?: findNodeModulesPath("react-native-gradle-plugin", reactNativeDir)  // < 0.72
    if (reactNativeGradlePlugin != null) {
        settings.includeBuild(reactNativeGradlePlugin)
    }

    applyNativeModulesSettingsGradle(settings)
}

ext.applyTestAppModule = { Project project ->
    applyNativeModulesAppBuildGradle(project)

    def isRntaProject =
        project.projectDir.getParent() != null &&
        project.rootDir == file(project.projectDir.getParent())

    def manifestFile = findFile("app.json")
    if (isRntaProject && manifestFile == null) {
        logger.warn("app.json was not found; test app integration is disabled")
        return
    }

    def manifest = new JsonSlurper().parseText(manifestFile.text)
    def resources = manifest["resources"]

    def androidResources = null
    if (resources instanceof List) {
        androidResources = resources
    } else if (resources.containsKey("android")) {
        androidResources = resources["android"]
    } else {
        throw new IllegalArgumentException(
            "The `resources` property in `app.json` has to be either a list " +
            "of paths, or must contain a nested list with the `android` key"
        )
    }

    def projectRoot = manifestFile.getParent()
    def androidResourceFiles = androidResources.collect {
        file("${projectRoot}/${it}")
    }
    def androidResDir = androidResourceFiles.find {
        it.isDirectory() && it.name == "res"
    }

    if (androidResDir != null) {
        androidResourceFiles.remove(androidResDir)
    }

    def generatedAssetsDir = file("${buildDir}/generated/rncli/src/main/assets/")
    generatedAssetsDir.mkdirs()

    def generatedResDir = file("${buildDir}/generated/rncli/src/main/res/")
    generatedResDir.mkdirs()

    // https://github.com/facebook/react-native/blob/3dfedbc1aec18a4255e126fde96d5dc7b1271ea7/packages/react-native/ReactAndroid/src/main/java/com/facebook/react/common/assets/ReactFontManager.java#L25
    def generatedFontsDir = file("${generatedAssetsDir}/fonts")
    generatedFontsDir.mkdirs()

    def generatedRawDir = file("${generatedResDir}/raw")
    generatedRawDir.mkdirs()

    preBuild.dependsOn(tasks.register("copyAssets", Copy) {
        androidResourceFiles.each {
            if (!isFontFile(it) && !isMediaFile(it)) {
                from(it)
            }
        }

        into(generatedAssetsDir)
    })

    preBuild.dependsOn(tasks.register("copyFonts", Copy) {
        androidResourceFiles.each {
            if (isFontFile(it)) {
                from(it)
            }
        }

        into(generatedFontsDir)
    })

    preBuild.dependsOn(tasks.register("copyRawResources", Copy) {
        androidResourceFiles.each {
            if (isMediaFile(it)) {
                from(it) {
                    // File-based resource names must contain only lowercase
                    // a-z, 0-9, or underscore
                    rename {
                        it.toLowerCase()
                    }
                }
            }
        }

        into(generatedRawDir)
    })

    preBuild.dependsOn(tasks.register("copyResources", Copy) {
        if (androidResDir != null) {
            from(androidResDir)
            into(generatedResDir)
        }
    })

    android {
        sourceSets {
            main {
                assets.srcDirs += generatedAssetsDir
                res.srcDirs += generatedResDir
                if (manifest.containsKey("android") && manifest["android"].containsKey("icons")) {
                    res.srcDirs += "${projectRoot}/${manifest["android"]["icons"]}"
                } else {
                    res.srcDirs += "${testAppDir}/android/app/src/main/res-launcher"
                }
            }
        }
    }
}
