import groovy.json.JsonSlurper
import org.gradle.initialization.DefaultSettings

import java.nio.file.Paths

private static void applySettings(Settings settings) {
    def projectDir = settings.findNodeModulesPath(settings.rootDir, "react-native-test-app")

    if (settings.buildReactNativeFromSource(settings.rootDir)) {
        def buildFile = Paths.get("${projectDir}/android/react-native-build.gradle")
        settings.rootProject.buildFileName = settings.rootDir.toPath().relativize(buildFile)

        def reactNativeDir = settings.findNodeModulesPath(settings.rootDir, "react-native")
        settings.include(":ReactAndroid")
        settings.project(":ReactAndroid")
            .projectDir = new File("${reactNativeDir}/ReactAndroid")

        settings.include(":packages:react-native-codegen:android")
        settings.project(":packages:react-native-codegen:android")
            .projectDir = new File("${reactNativeDir}/packages/react-native-codegen/android")

        settings.includeBuild("${reactNativeDir}/packages/react-native-codegen/android")
        settings.includeBuild("${reactNativeDir}/packages/react-native-gradle-plugin")
    }

    settings.include(":app")
    settings.include(":support")

    settings.project(":app")
        .projectDir = new File("${projectDir}/android/app")
    settings.project(":support")
        .projectDir = new File("${projectDir}/android/support")
}

def scriptDir = buildscript.sourceFile.getParent()
apply from: "$scriptDir/android/test-app-util.gradle"

def cliAndroidDir = findNodeModulesPath(rootDir, "@react-native-community/cli-platform-android")
apply from: "$cliAndroidDir/native_modules.gradle"

ext.applyTestAppSettings = { DefaultSettings defaultSettings ->
    buildscript { scriptHandler ->
        apply from: "$scriptDir/android/force-resolve-trove4j.gradle", to: scriptHandler
    }

    applySettings(defaultSettings)
    applyNativeModulesSettingsGradle(defaultSettings)
}

ext.applyTestAppModule = { Project project ->
    applyNativeModulesAppBuildGradle(project)

    def isRntaProject = project.projectDir.getParent() != null &&
        (project.rootDir == file(project.projectDir.getParent()))

    def manifestFile = findFile("app.json")
    if (isRntaProject && manifestFile == null) {
        logger.warn("app.json was not found; test app integration is disabled")
        return
    }

    def manifest = new JsonSlurper().parseText(manifestFile.text)

    def resources = manifest["resources"]

    def androidResources = null
    if (resources instanceof List) {
        androidResources = resources
    } else if (resources.containsKey("android")) {
        androidResources = resources["android"]
    } else {
        throw new IllegalArgumentException("The \"resources\" property of the app.json has " +
            "to be either a list of paths, or must contain a nested list with the \"android\" key")
    }

    def projectRoot = manifestFile.getParent()
    def androidResourceFiles = androidResources
        .collect { file("$projectRoot/$it") }

    def androidResDir = androidResourceFiles
        .find { it.isDirectory() && it.name == "res" }

    if (androidResDir != null) {
        androidResourceFiles.remove(androidResDir)
    }

    def generatedAssetsDir = file("${buildDir}/generated/rncli/src/main/assets/")
    generatedAssetsDir.mkdirs()

    def generatedResDir = file("${buildDir}/generated/rncli/src/main/res/")
    generatedResDir.mkdirs()

    task copyAssets(type: Copy) {
        androidResourceFiles.each {
            from it
        }

        into generatedAssetsDir
    }

    task copyManifest(type: Copy) {
        def generatedRawDir = file("$generatedResDir/raw")
        generatedRawDir.mkdirs()

        from manifestFile
        into generatedRawDir
    }

    task copyResources(type: Copy) {
        if (androidResDir != null) {
            from androidResDir
            into generatedResDir
        }
    }

    preBuild.dependsOn(copyManifest)
    preBuild.dependsOn(copyAssets)
    preBuild.dependsOn(copyResources)

    android {
        sourceSets {
            main {
                assets.srcDirs += generatedAssetsDir
                res.srcDirs += generatedResDir
            }
        }
    }
}
