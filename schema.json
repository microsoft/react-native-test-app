{
  "$defs": {
    "component": {
      "type": "object",
      "properties": {
        "appKey": {
          "description": "The app key passed to `AppRegistry.registerComponent()`.",
          "type": "string"
        },
        "displayName": {
          "description": "Name to be displayed on home screen.",
          "type": "string"
        },
        "initialProperties": {
          "description": "Properties that should be passed to your component.",
          "type": "object"
        },
        "presentationStyle": {
          "description": "The style in which to present your component.",
          "type": "string",
          "enum": ["default", "modal"]
        },
        "slug": {
          "description": "URL slug that uniquely identifies this component. Used for deep linking.",
          "type": "string"
        }
      },
      "required": ["appKey"]
    },
    "manifest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "bundleRoot": {
          "description": "Specifies the root of the bundle file name. E.g., if the bundle file is `index.&lt;platform&gt;.bundle`, `index` is the bundle root. Defaults to `index` and `main`.",
          "type": "string"
        },
        "singleApp": {
          "description": "In single-app mode, the component with the specified slug gets launched automatically, essentially behaving as a normal app. Defaults to multi-app mode.",
          "type": "string"
        },
        "components": {
          "description": "All components that should be accessible from the home screen should be declared under this property. Each component must have `appKey` set, i.e. the name that you passed to `AppRegistry.registerComponent`.",
          "type": "array",
          "items": { "$ref": "#/$defs/component" }
        }
      },
      "required": ["name", "displayName"]
    },
    "signingConfig": {
      "type": "object",
      "properties": {
        "keyAlias": {
          "description": "Use this property to specify the alias of key to use in the store",
          "type": "string"
        },
        "keyPassword": {
          "description": "Use this property to specify the password of key in the store",
          "type": "string"
        },
        "storeFile": {
          "description": "Use this property to specify the relative file path to the key store file",
          "type": "string"
        },
        "storePassword": {
          "description": "Use this property to specify the password of the key store",
          "type": "string"
        }
      },
      "required": ["storeFile"],
      "exclude-from-codegen": true
    }
  },
  "allOf": [{ "$ref": "#/$defs/manifest" }],
  "type": "object",
  "properties": {
    "resources": {
      "description": "Here you should declare all resources that should be bundled with the app. The property can be a list of paths to resources or an object with platform specific resources using platform names as key. A path must be relative to the path of `app.json`, and can point to both a file or a directory.",
      "oneOf": [
        {
          "type": "array",
          "items": { "type": "string" },
          "uniqueItems": true
        },
        {
          "type": "object",
          "properties": {
            "android": {
              "type": "array",
              "items": { "type": "string" },
              "uniqueItems": true
            },
            "ios": {
              "type": "array",
              "items": { "type": "string" },
              "uniqueItems": true
            },
            "macos": {
              "type": "array",
              "items": { "type": "string" },
              "uniqueItems": true
            },
            "windows": {
              "type": "array",
              "items": { "type": "string" },
              "uniqueItems": true
            }
          }
        }
      ]
    },
    "android": {
      "description": "Android specific properties go here.",
      "type": "object",
      "properties": {
        "package": {
          "description": "Use this property to set the application ID of the APK. The value is set to `applicationId` in `build.gradle`.",
          "type": "string"
        },
        "signingConfigs": {
          "description": "Use this to set the signing configurations for the app",
          "type": "object",
          "properties": {
            "debug": {
              "description": "Use this property for the debug signing config for the app. The value `storeFile` is required. Android defaults will be provided for other properties.",
              "allOf": [{ "$ref": "#/$defs/signingConfig" }],
              "type": "object"
            },
            "release": {
              "description": "Use this property for the release signing config for the app. The value `storeFile` is required. Android defaults will be provided for other properties.",
              "allOf": [{ "$ref": "#/$defs/signingConfig" }],
              "type": "object"
            }
          }
        }
      }
    },
    "ios": {
      "description": "iOS specific properties go here.",
      "type": "object",
      "properties": {
        "bundleIdentifier": {
          "description": "Use this property to set the bundle identifier of the final app bundle. This is the same as setting `PRODUCT_BUNDLE_IDENTIFIER` in Xcode.",
          "type": "string"
        },
        "codeSignEntitlements": {
          "description": "Specifies the path to a custom Entitlements file. The path should be relative to `app.json`. This is the same as setting `CODE_SIGN_ENTITLEMENTS` in Xcode.",
          "type": "string"
        },
        "codeSignIdentity": {
          "description": "Sets the code signing identity to use when signing code. This is the same as setting `CODE_SIGN_IDENTITY` in Xcode.",
          "type": "string"
        },
        "developmentTeam": {
          "description": "Sets the development team that the app should be assigned to. This is the same as setting `DEVELOPMENT_TEAM` in Xcode.",
          "type": "string"
        },
        "reactNativePath": {
          "description": "Sets a custom path to React Native. Useful for when `require(\"react-native\")` does not return the desired path.",
          "type": "string"
        }
      }
    },
    "macos": {
      "description": "macOS specific properties go here.",
      "type": "object",
      "properties": {
        "bundleIdentifier": {
          "description": "Use this property to set the bundle identifier of the final app bundle. This is the same as setting `PRODUCT_BUNDLE_IDENTIFIER` in Xcode.",
          "type": "string"
        },
        "codeSignEntitlements": {
          "description": "Specifies the path to a custom Entitlements file. The path should be relative to `app.json`. This is the same as setting `CODE_SIGN_ENTITLEMENTS` in Xcode.",
          "type": "string"
        },
        "codeSignIdentity": {
          "description": "Sets the code signing identity to use when signing code. This is the same as setting `CODE_SIGN_IDENTITY` in Xcode.",
          "type": "string"
        },
        "developmentTeam": {
          "description": "Sets the development team that the app should be assigned to. This is the same as setting `DEVELOPMENT_TEAM` in Xcode.",
          "type": "string"
        },
        "reactNativePath": {
          "description": "Sets a custom path to React Native for macOS. Useful for when `require(\"react-native-macos\")` does not return the desired path.",
          "type": "string"
        }
      }
    },
    "windows": {
      "description": "Windows specific properties go here.",
      "type": "object",
      "properties": {
        "appxManifest": {
          "description": "Sets the path to your app package manifest. If none is set, a default manifest will be provided. Changes to this property will not be automatically be picked up; you need to re-run `yarn install-windows-test-app` to update the solution.",
          "type": "string"
        },
        "certificateKeyFile": {
          "description": "The path to the certificate to use. If specified, it will also enable package signing. Changes to this property will not be automatically be picked up; you need to re-run `yarn install-windows-test-app` to update the solution.",
          "type": "string"
        },
        "certificatePassword": {
          "description": "The password for the private key in the certificate. Leave unset if no password. Changes to this property will not be automatically be picked up; you need to re-run `yarn install-windows-test-app` to update the solution.",
          "type": "string"
        },
        "certificateThumbprint": {
          "description": "This value must match the thumbprint in the signing certificate, or be unset. Changes to this property will not be automatically be picked up; you need to re-run `yarn install-windows-test-app` to update the solution.",
          "type": "string"
        }
      }
    }
  }
}
